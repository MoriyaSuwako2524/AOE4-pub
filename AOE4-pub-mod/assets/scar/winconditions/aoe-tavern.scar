-----------------------------------------------------------------------
-- Imported Scripts
-----------------------------------------------------------------------

-- Import Utility Scripts
import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions
import("util/config_util.scar")
import("util/common_header.scar")
import("ui/pick_race_ui.scar")
import("gameplay/tavern_round.scar")
import("gameplay/battle.scar")
import("gameplay/relations.scar")

-- Import Gameplay Systems
import("gameplay/score.scar")					-- Tracks player score
import("gameplay/diplomacy.scar")				-- Manages Tribute

-- Import Win Conditions
import("winconditions/tavern-annihilation.scar")		-- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")		-- Support for player quitting or dropping (through pause menu or disconnection)
import("winconditions/surrender.scar")			-- Support for player surrender (through pause menu)

-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI
import("gameplay/event_cues.scar")
import("gameplay/currentageui.scar")
-- import("ui/chosen_role_ui.scar")
import("ui/hall_ui.scar")
import("ui/observer_ui.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
	module = "Mod",
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
	
	
	
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()
	
	
end

-- Called on match initialization before handing control to the player
function Mod_OnInit()
	for i,player in pairs(PLAYERS) do 
		EGroup_DestroyAllEntities(Player_GetEntities(player.id))
		SGroup_DestroyAllSquads(Player_GetSquads(player.id))
	end
	localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	-- Rule_AddInterval(Mod_CheckVictory, 1)
	--[[
	for _, sbps in pairs(SBP) do 
		for _, sbp in pairs(sbps) do 
			-- Squad_Precache(sbp, 1, )
		end
	end
	
	--]]
	for i,player in pairs(PLAYERS) do 
		player.isRefundCards = false
		if Player_GetRaceName(player.id) == "ottoman" then 
			Player_SetStateModelFloat(player.id, "imperial_council_exp_ott", 0)
			Player_SetStateModelFloat(player.id, "imperial_council_level_ott", 0)
			Player_SetStateModelInt(player.id, "vizier_limit_ott", 0)
			Player_SetStateModelInt(player.id, "janissary_increase_ott", 0)
			Player_SetStateModelInt(player.id, "total_viziers_ott", 0)
		end
	end
	
	Rule_AddGlobalEvent(Mod_OnLocalPlayerChanged, GE_LocalPlayerChanged)
end




-- Called after initialization is done when game is fading up from black
function Mod_Start()
	FOW_RevealAll()
	--[[
	local str2 = Loc_GetString("$aa0406c7490b4889acebb0e09301e10f:8").LocString
	if Loc_GetString("$aa0406c7490b4889acebb0e09301e10f:137").LocString == str2  then 
	UI_CreateEventCue("是CN", nil, "", "", "sfx_ui_event_queue_high_priority_play")
	else 
	UI_CreateEventCue("不是CN", nil, "", "", "sfx_ui_event_queue_high_priority_play")
	end
	local str = Loc_GetString("$aa0406c7490b4889acebb0e09301e10f:137").LocString 
	UI_CreateEventCue("字符长度：" .. string.len(str) , nil, "", "", "sfx_ui_event_queue_high_priority_play")
	UI_CreateEventCue(str, nil, "", "", "sfx_ui_event_queue_high_priority_play")
	UI_CreateEventCue("字符长度2：" .. string.len(str2) , nil, "", "", "sfx_ui_event_queue_high_priority_play")
	if str == "cn" then 
		UI_CreateEventCue("到底是不是CN呢", nil, "", "", "sfx_ui_event_queue_high_priority_play")
	end
	--]]
end


function Mod_CheckVictory()
	local alives = 0
	local alivePlayer = nil
	for i, player in pairs(PLAYERS) do 
		if Player_IsAlive(player.id) then 
			alives = alives + 1
			alivePlayer = player
		else 
			player.health = 0
			if not player.isRefundCards then 
				local squadCards = PlayerCard_GetSquadCards(player.id)
				if squadCards ~= nil and #squadCards > 0 then 
					for _, squadCard in pairs(squadCards) do 
						if squadCard.card ~= nil then 
							SquadCards_DecreaPickedCard(squadCard.card)
						end
					end
				end
				
				squadCards = PlayerCard_GetTempAreaSquadCards(player.id)
				if squadCards ~= nil and #squadCards > 0 then 
					for _, squadCard in pairs(squadCards) do 
						if squadCard.card ~= nil then 
							SquadCards_DecreaPickedCard(squadCard.card)
						end
					end
				end
			else 
				player.isRefundCards = true
			end
			
		end
	end
	
	if alives < 2 then 
		-- 最终胜利的玩家
		if alivePlayer ~= nil then 
			Core_SetPlayerVictorious(alivePlayer.id, Annihilation_WinnerPresentation, WR_ANNIHILATION)
		end
		Rule_Remove(Mod_CheckVictory)
		Core_OnGameOver()
	end
end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Mod_OnPlayerDefeated(player, reason)
	player.health = 0
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
	
	
	
end


function Mod_OnLocalPlayerChanged(context)
	localPlayer = Core_GetPlayersTableEntry(context.player)
end