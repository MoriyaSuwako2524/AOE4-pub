-- 玩家卡牌管理
import("util/common_header.scar")

Core_RegisterModule("PlayerCard")


function PlayerCard_OnInit()
	for i, player in pairs(PLAYERS) do 
		-- 已拥有单位卡牌
		player.squadCards = {}
		for i = 1, 7 do 
			table.insert(player.squadCards, {
					index = i,
					idle = true,
					card = nil,
					showType = CARD_SHOW_EMPTY,
				})
		end
		-- 待选择单位卡牌
		player.toBeSelectSquadCards = {}
		-- 暂存区单位卡牌
		player.tempAreaSquadCards = {}
		for i = 1, 3 do 
			table.insert(player.tempAreaSquadCards, {
					index = i,
					idle = true,
					card = nil,
					showType = CARD_SHOW_EMPTY,
				})
		end
		-- 待选择技能卡牌
		player.toBeSelectAbilityCards = {}
		
		-- 玩家单位与单位卡牌的关系
		player.squadMappings = {}
		
		-- 是否锁定单位卡牌刷新
		player.isLockedCard = false
		
		-- 三连卡牌
		player.toBeSelectTripleBuyCards = {}
	end
end

function PlayerCard_OnRoundStart()
	
end

function PlayerCard_OnRoundEnd()
	for i, player in pairs(PLAYERS) do 
		player.squadMappings = {}
		PlayerCard_UnbindAllSG(player.id)
	end
end

-- 是否锁定了卡牌
function PlayerCard_IsLockedCard(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	return player.isLockedCard
end

-- 更新锁定卡牌标识
function PlayerCard_SetIsLockedCard(playerId, lockedFlag)
	local player = Core_GetPlayersTableEntry(playerId)
	player.isLockedCard = lockedFlag
end

-- 获取已拥有的单位卡牌
function PlayerCard_GetSquadCards(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	return player.squadCards
end


-- 检测卡牌区对应位置没有卡牌
function PlayerCard_CheckSquadCardsIdxIsEmpty(playerId, cardIdx)
	return PlayerCard_GetSquadCardByIdx(playerId, cardIdx) == nil
end

-- 检测暂存区对应位置没有卡牌
function PlayerCard_CheckTempAreaSquadCardsIdxIsEmpty(playerId, cardIdx)
	return PlayerCard_GetTempAreaSquadCardByIdx(playerId, cardIdx) == nil
end

-- 获取待选择单位卡牌
function PlayerCard_GetToBeSelectSquadCards(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	return player.toBeSelectSquadCards
end



-- 获取暂存区单位卡牌
function PlayerCard_GetTempAreaSquadCards(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	return player.tempAreaSquadCards
end

-- 待选择技能卡牌
function PlayerCard_GetToBeSelectAbilityCards(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	return player.toBeSelectAbilityCards
end

-- 新增待选择单位卡牌
function PlayerCard_AddToToBeSelectSquadCards(playerId, cardId)
	
end

-- 新增待选择单位卡牌
function PlayerCard_SetToBeSelectSquadCards(playerId, squadCards)
	local player = Core_GetPlayersTableEntry(playerId)
	player.toBeSelectSquadCards = squadCards
end


-- 新增暂存区单位卡牌
function PlayerCard_AddToTempAreaSquadCards(playerId, cardId)
	
end
 

-- 新增待选择技能卡牌
function PlayerCard_AddToToBeSelectAbilityCards(playerId, cardId)
	
end

-- 将单位卡牌展示状态重置成mini
function PlayerCard_ResetSquadCardsShowType(playerId)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	for _, card in pairs(squadCards) do 
		if card.card ~= nil then 
			card.showType = CARD_SHOW_MINI
		else 
			card.showType = CARD_SHOW_EMPTY
		end
	end
	
   squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	for _, card in pairs(squadCards) do 
		if card.card ~= nil then 
			card.showType = CARD_SHOW_MINI
		else 
			card.showType = CARD_SHOW_EMPTY
		end
	end
end

-- 增加单位卡牌到暂存区
function PlayerCard_AddSquadCardsToTempArea(playerId, squadCardId)
	PlayerCard_DeleteToBeSelectSquadCard(playerId, cardId)
	PlayerCard_AddSquadCardToTempArea(playerId, squadCardId)
end

function PlayerCard_AddSquadCardToTempArea(playerId, squadCardId)
	-- 获取单位卡牌
	local card = SquadCards_GetById(squadCardId)
	local squadCard = Clone(card)
	local squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	for i = #squadCards, 1, -1 do 
		if squadCards[i].card == nil then 
			local c = squadCards[i]
			c.showType = CARD_SHOW_MINI
			squadCard.cardState = CARD_STATE_ENTER
			c.card = squadCard
			squadCard.abilityCards = {}
			SquadCards_BuyEvent(squadCard)
			return
		end
	end
end

-- 从暂存区出售单位卡牌
function PlayerCard_SellSquadCardsFromTempArea(playerId, squadCardIdx)
	local card = PlayerCard_GetTempAreaSquadCardByIdx(playerId, squadCardIdx)
	SquadCards_DecreaPickedCard(card)
	PlayerCard_RemoveSquadCardFromTempArea(playerId, squadCardIdx)
	PlayerMgr_AddFood(playerId, 1)
end

-- 玩家暂存区单位卡牌是否有空位
function PlayerCard_CheckHadEmptyPosInTempAreaSquadCards(playerId)
	local squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	for _, card in pairs(squadCards) do 
		if card.card == nil then 
			 return true
		end
	end
	return false
end

-- 暂存区卡牌进场
function PlayerCard_AddSquadCardsFromTempArea(playerId, squadCardIdx)
	local squadCard = PlayerCard_GetTempAreaSquadCardByIdx(playerId, squadCardIdx)
	if squadCard ~= nil then 
		PlayerCard_RemoveSquadCardFromTempArea(playerId, squadCardIdx)
		--SquadCards_EnterEvent(squadCard)
		PlayerCard_AddSquadCardByCard(playerId, squadCard)
		Core_CallDelegateFunctions("OnSquadCardEnter", playerId, SquadCards_GetId(squadCard), AREA_STANDARD)
	end
end

-- 从暂存区删除卡牌
function PlayerCard_RemoveSquadCardFromTempArea(playerId, squadCardIdx)
	local squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	squadCards[squadCardIdx] = {
		index = squadCardIdx,
		idle = true,
		card = nil,
		showType = CARD_SHOW_EMPTY,
	}
end


-- 获取指定位置的暂存区单位卡牌
function PlayerCard_GetTempAreaSquadCardByIdx(playerId, squadCardIdx)
	local squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	local squadCardInfo = squadCards[squadCardIdx]
	if squadCardInfo == nil then 
		return nil 
	end
	return squadCardInfo.card
end

-- 删除待选的单位卡牌
function PlayerCard_DeleteToBeSelectSquadCard(playerId, cardId)  
	local tobeSelectCards = PlayerCard_GetToBeSelectSquadCards(playerId)
	for i = #tobeSelectCards, 1 , -1 do 
		if tobeSelectCards[i].card ~= nil and tobeSelectCards[i].card.cardId == cardId then 
			table.remove(tobeSelectCards, i)
		end
	end
end

-- 从待选单位卡牌增加单位卡牌
function PlayerCard_AddSquadCardsFromToBeSelectArea(playerId, cardId)
	PlayerCard_DeleteToBeSelectSquadCard(playerId, cardId)
	PlayerCard_AddSquadCard(playerId, cardId)
end

-- 增加卡牌
function PlayerCard_AddSquadCard(playerId, cardId) 
	-- 获取单位卡牌
	local sc = SquadCards_GetById(cardId)
	local squadCard = Clone(sc)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	for i = 1, #squadCards do 
		if squadCards[i].card == nil then 
			local c = squadCards[i]
			c.showType = CARD_SHOW_MINI
			squadCard.cardState = CARD_STATE_UPGRADE
			c.card = squadCard
			squadCard.abilityCards = {}
			SquadCards_BuyEvent(squadCard)
			SquadCards_EnterEvent(squadCard)
			return
		end
	end
end

-- 增加卡牌
function PlayerCard_AddSquadCardByCard(playerId, card) 
	-- 获取单位卡牌
	local sc = card
	local squadCard = Clone(sc)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	for i = 1, #squadCards do 
		if squadCards[i].card == nil then 
			local c = squadCards[i]
			c.showType = CARD_SHOW_MINI
			squadCard.cardState = CARD_STATE_UPGRADE
			c.card = squadCard
			squadCard.abilityCards = {}
			SquadCards_EnterEvent(squadCard)
			return
		end
	end
end

-- 获取待选区域指定位置的单位卡牌
function PlayerCard_GetToBeSelectSquadCard(playerId, index)
	local tobeSelectCards = PlayerCard_GetToBeSelectSquadCards(playerId)
	if tobeSelectCards ~= nil then 
		local squadCard = tobeSelectCards[index].card
		return squadCard
	end
	return nil
end

-- 获取待选区域指定为的单位卡牌（包含索引等信息）
function PlayerCard_GetToBeSelectSquadCardData(playerId, index)
	local tobeSelectCards = PlayerCard_GetToBeSelectSquadCards(playerId)
	local squadCard = tobeSelectCards[index]
	return squadCard
end

-- 检测待选卡牌区是否有对应卡牌
function PlayerCard_CheckToBeSelectSquadCardsHadCardId(playerId, cardId)
	local squadCards = PlayerCard_GetToBeSelectSquadCards(playerId)
	for i = #squadCards, 1, -1 do 
		if squadCards[i].card ~= nil and SquadCards_GetId(squadCards[i].card) == cardId then 
			 return true
		end
	end
	return false
end

-- 玩家单位卡牌是否有空位
function PlayerCard_CheckHadEmptyPosInSquadCards(playerId)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	for i = #squadCards, 1, -1 do 
		if squadCards[i].card == nil then 
			 return true
		end
	end
	return false
end

-- 在指定位置插入单位卡牌
function PlayerCard_InsertSquadCards(playerId, squadCardId, squadCardIdx)
	local squadCard = SquadCards_GetById(squadCardId)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	-- 如果指定位置没有卡牌，那就不需要移动
	if squadCards[squadCardIdx].card ~= nil then 
		-- 默认卡牌需要往右移动
		-- 先拿到右边最小的空位
		local rightMinIdleIdx = nil 
		for i = squadCardIdx,  #squadCards do 
			if squadCards[i] == nil then 
				rightMinIdleIdx = i
			end
		end
		
		if rightMinIdleIdx ~= nil then 
			for i = rightMinIdleIdx, squadCardIdx + 1, -1 do 
				if squadCards[i].card == nil then 
					-- 如果卡牌为空，那就可以尝试将上一个位置的卡牌移过来
					squadCards[i].card = squadCards[i-1].card
					squadCards[i].showType = squadCards[i-1].showType
					squadCards[i].card.cardState = squadCards[i-1].cardState
					squadCards[i-1].card = nil
					squadCards[i-1].showType = CARD_SHOW_EMPTY
				end
			end
		else 
			local leftMaxIdleIdx = nil 
			for i = squadCardIdx, 1, -1 do 
				if squadCards[i].card == nil then 
					leftMaxIdleIdx = i
				end
			end
			
			if leftMaxIdleIdx ~= nil then 
				-- 右边没有空位，那就往左移动
				for i = leftMaxIdleIdx, squadCardIdx - 1 do 
					if squadCards[i].card == nil then 
						-- 如果卡牌为空，那就可以尝试将上一个位置的卡牌移过来
						squadCards[i].card = squadCards[i+1].card
						squadCards[i].showType = squadCards[i+1].showType
						squadCards[i].card.cardState = squadCards[i+1].cardState
						squadCards[i+1].card = nil
						squadCards[i+1].showType = CARD_SHOW_EMPTY
					end
				end
			end
		end
	end
	
	squadCard.cardState = CARD_STATE_UPGRADE
	squadCard.abilityCards = {}
	squadCards[squadCardIdx] = {
		index = squadCardIdx,
		idle = false,
		card = squadCard,
		showType = CARD_SHOW_MINI,
	}
end

function PlayerCard_HadSquadCard(playerId, cardId)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	if squadCards ~= nil and #squadCards > 0 then 
		for _, squadCard in pairs(squadCards) do 
			if squadCard.card ~= nil and SquadCards_GetId(squadCard.card) == cardId and SquadCards_IsNormalCard(squadCard.card) then 
				return true
			end
		end
	end
	
	squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	if squadCards ~= nil and #squadCards > 0 then 
		for _, squadCard in pairs(squadCards) do 
			if squadCard.card ~= nil and SquadCards_GetId(squadCard.card) == cardId and SquadCards_IsNormalCard(squadCard.card) then 
				return true
			end
		end
	end
	
	return false
end


-- 售卖单位卡牌
function PlayerCard_SellSquadCards(playerId, squadCardIdx)
	local card = PlayerCard_GetSquadCardByIdx(playerId, squadCardIdx)
	SquadCards_DecreaPickedCard(card)
	PlayerCard_RemoveSquadCard(playerId, squadCardIdx)
	PlayerMgr_AddFood(playerId, 1)
end


function PlayerCard_RemoveSquadCard(playerId, squadCardIdx)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	squadCards[squadCardIdx] = {
		index = squadCardIdx,
		idle = true,
		card = nil,
		showType = CARD_SHOW_EMPTY,
	}
end

-- 往玩家的单位卡牌添加能力卡牌
function PlayerCard_AddAbilityToSquadCardFromToBeSelectAb(playerId, abilityCardId, squadCardIdx)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local squadCard = squadCards[squadCardIdx]
	local abilityCards = PlayerCard_GetToBeSelectAbilityCards(playerId)
	if #abilityCards > 0 and squadCard ~= nil and squadCard.card ~= nil then 
		local abilityCard  = AbilityCards_GetById(abilityCardId)
		if AbilityCards_GetExecutedLimit(abilityCard) == 1 then 
			--print("........PlayerCard_AddAbilityToSquadCard...........")
			abilityCard.OnNow(playerId, squadCardIdx, squadCard.card, abilityCard)
		else
			SquadCards_IncreaseAbilityCount(squadCard.card)
			PlayerCard_SetToBeSelectAbilityCards(playerId, {})
			AbilityCards_BuyEvent(abilityCard)
			AbilityCards_EnterEvent(abilityCard)
			table.insert(squadCard.card.abilityCards, abilityCard)
		end
	end
end

-- 往玩家的单位卡牌添加能力卡牌
function PlayerCard_AddAbilityToSquadCard(playerId, abilityCardId, squadCardIdx)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local squadCard = squadCards[squadCardIdx]
	local abilityCard = AbilityCards_GetById(abilityCardId)
	if AbilityCards_GetExecutedLimit(abilityCard) == 1 then 
		--print("........PlayerCard_AddAbilityToSquadCard...........")
		abilityCard.OnNow(playerId, squadCardIdx, squadCard.card, abilityCard)
	else 
		AbilityCards_BuyEvent(abilityCard)
		AbilityCards_EnterEvent(abilityCard)
		SquadCards_IncreaseAbilityCount(squadCard.card)
		table.insert(squadCard.card.abilityCards, abilityCard)
	end
end

-- 获取指定位置的单位卡牌
function PlayerCard_GetSquadCardByIdx(playerId, squadCardIdx)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local squadCardInfo = squadCards[squadCardIdx]
	return squadCardInfo.card
end

-- 获取指定位置的技能卡牌
function PlayerCard_GetSquadAbilityCards(playerId, squadCardIdx)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local squadCardInfo = squadCards[squadCardIdx]
	if squadCardInfo.card == nil then 
		return nil 
	end
	return squadCardInfo.card.abilityCards
end

-- 获取指定单位卡牌的技能卡牌
function PlayerCard_GetAbilityCards(squadCard)
	return squadCard.abilityCards
end

-- 遍历单位卡牌
function PlayerCard_Foreach(playerId, func, context)
	if not Player_IsAlive(playerId) then 
		return 
	end
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local count = #squadCards
	for i = 1, count do
		local card = squadCards[i].card
		if card ~= nil then 
			func(i, playerId, card, context)
		end
	end
end


-- 遍历暂存区单位卡牌
function PlayerCard_ForeachTempAreaCards(playerId, func, context)
	if not Player_IsAlive(playerId) then 
		return 
	end
	local squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	local count = #squadCards
	for i = 1, count do
		local card = squadCards[i].card
		if card ~= nil then 
			func(i, playerId, card, context)
		end
	end
end


function PlayerCard_AddSquadMapping(player, squadCardIdx, sid)
	player.squadMappings["sid".. Squad_GetID(sid)] = squadCardIdx
end

-- 获得该单位属于第几张卡牌
function PlayerCard_GetSquadMapping(player, sid)
	return player.squadMappings["sid".. Squad_GetID(sid)]
end

-- 获得卡牌对应SGroup
function PlayerCard_GetSG(squadCard)
	local sg = nil
	if squadCard.sg == nil then 
		sg = SGroup_CreateUniqueWithPrefix(squadCard.cardId)
		squadCard.sg = SGroup_GetName(sg)
	else
		sg = SGroup_FromName(squadCard.sg)
	end
	--print("sg:".. SGroup_Count(sg))
	return sg
end

-- 获得卡牌中的单位列表
function PlayerCard_GetSquadInCard(squadCard)
	return squadCard.squads
end

-- 绑定SGroup, 同时记录单位和卡牌信息
function PlayerCard_BindingSG(playerId, squadCardIdx, sg)
	local squadCard = PlayerCard_GetSquadCardByIdx(playerId, squadCardIdx)
	squadCard.sg = sg
	local player = Core_GetPlayersTableEntry(playerId)
	local func = function(idx, t, sid) 
		PlayerCard_AddSquadMapping(player, squadCardIdx, sid)
	end
	
	SGroup_ForEach(sg, func)
end

-- 解绑SGroup
function PlayerCard_UnBindSG(squadCard)
	if squadCard.sg ~= nil then 
		SGroup_DestroyAllSquads(PlayerCard_GetSG(squadCard))
		squadCard.sg = nil
	end
end

-- 解绑所有的SGRoup
function PlayerCard_UnbindAllSG(playerId) 
	local func = function(idx, playerId, card) 
		PlayerCard_UnBindSG(card)
	end
	PlayerCard_Foreach(playerId, func)
end

-- 设置待选能力卡牌
function PlayerCard_SetToBeSelectAbilityCards(playerId, abilityCards)
	local player = Core_GetPlayersTableEntry(playerId)
	player.toBeSelectAbilityCards = abilityCards
end


function PlayerCard_GetToBeSelectAbilityCards(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	return player.toBeSelectAbilityCards
end


-- 执行场上单位卡牌所有能力，doEvent：OnCombatStart ....
function PlayerCard_ForeachDoAbilities(playerId, squadCard, squadCardIdx, context, doEvent)
	for i, abilities in pairs(SquadCards_GetDefaultAbilities(squadCard)) do 
		for _, ability in pairs(abilities) do
			if ability[doEvent] ~= nil then 
				ability[doEvent](playerId, AREA_STANDARD, squadCardIdx, squadCard, ability, i, context)
			end
		end
	end
	local abilityCards = PlayerCard_GetAbilityCards(squadCard)
	for i, abilityCard in pairs(abilityCards) do
		if abilityCard[doEvent] ~= nil then 
			abilityCard[doEvent](playerId, AREA_STANDARD, squadCardIdx, squadCard, abilityCard, context)
		end
	end
end

-- 执行暂存区单位卡牌所有能力，doEvent：OnCombatStart ....
function PlayerCard_ForeachDoAbilitiesByTempArea(playerId, squadCard, squadCardIdx, context, doEvent)
	for i, abilities in pairs(SquadCards_GetDefaultAbilities(squadCard)) do 
		for _, ability in pairs(abilities) do
			if ability[doEvent] ~= nil then 
				ability[doEvent](playerId, AREA_TEMP, squadCardIdx, squadCard, ability, i, context)
			end
		end
	end
	local abilityCards = PlayerCard_GetAbilityCards(squadCard)
	for i, abilityCard in pairs(abilityCards) do
		if abilityCard[doEvent] ~= nil then 
			abilityCard[doEvent](playerId, AREA_TEMP, squadCardIdx, squadCard, abilityCard, context)
		end
	end
end


-- 设置三连卡牌
function PlayerCard_SetToBeSelectTripleBuyCards(playerId) 
	--print("PlayerCard_SetToBeSelectTripleBuyCards")
	local player = Core_GetPlayersTableEntry(playerId)
	local squadCards = SquadCards_RandGetSquadCardsByLevel(playerId)
	local cards = {}
	for i, c in pairs(squadCards) do 
		local card = Clone(c.card)
		card.tripleBuyCardType = CARD_TYPE_SQUAD
		table.insert(cards, card)
	end
	
	local abilityCards = AbilityCards_RandGet(1, 2)
	for i, c in pairs(abilityCards) do 
		local card = Clone(c)
		card.tripleBuyCardType = CARD_TYPE_ABILITY
		table.insert(cards, card)
	end
	--print("count:" .. #cards)
	-- Util_PrintTable(cards)
	player.tobeSelectTripleBuyCards = cards
end

-- 获得三连卡牌
function PlayerCard_GetTobeSelectTripleBuyCards(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	return player.tobeSelectTripleBuyCards
end


-- 三连第一步：将卡牌添加到左侧同类卡牌中
function PlayerCard_TripleBuyCardStep1(playerId, squadCardId)
	--print("PlayerCard_TripleBuyCardStep1")
	local toAddSquadCard = SquadCards_GetById(squadCardId)
	PlayerCard_TripleBuyCardStep1Common(playerId, squadCardId, toAddSquadCard)
	local toBeSelectSquadCards = PlayerCard_GetToBeSelectSquadCards(playerId)
	for i, card in pairs(toBeSelectSquadCards) do 
		if card.card.cardId == squadCardId then 
			table.remove(toBeSelectSquadCards, i)
			break
		end
	end
end


function PlayerCard_TripleBuyCardStep1Common(playerId, squadCardId, toAddSquadCard)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local player = Core_GetPlayersTableEntry(playerId)
	
	-- 再设置第二部的待选卡牌
	PlayerCard_SetToBeSelectTripleBuyCards(playerId) 
	
	local rightCard = nil 
	local rightCardIdx = nil 
	
	local standardCount = 0
	for i = #squadCards, 1, -1 do 
		local card = PlayerCard_GetSquadCardByIdx(playerId, i)
		if card ~= nil and SquadCards_GetId(card) == squadCardId and SquadCards_IsNormalCard(card)  then 
			standardCount = standardCount + 1
		end
	end
	
	if standardCount > 1 then 
		-- 先找到最右侧的卡牌
		for i = #squadCards, 1, -1 do 
			local card = PlayerCard_GetSquadCardByIdx(playerId, i)
			if card ~= nil and SquadCards_GetId(card) == squadCardId and SquadCards_IsNormalCard(card)  then 
				rightCard = card
				rightCardIdx = i
				PlayerCard_RemoveSquadCard(playerId, rightCardIdx)
				break
			end
		end
	end
	
	if rightCard == nil then 
		local tempAreaSquadCards = PlayerCard_GetTempAreaSquadCards(playerId)
		
		-- 先找到最右侧的卡牌
		for i = #tempAreaSquadCards, 1, -1 do 
			local card = PlayerCard_GetTempAreaSquadCardByIdx(playerId, i)
			if card ~= nil and SquadCards_GetId(card) == squadCardId and SquadCards_IsNormalCard(card)  then 
				rightCard = card
				rightCardIdx = i
				PlayerCard_RemoveSquadCardFromTempArea(playerId, rightCardIdx)
				break
			end
		end
	end
	
	local mergedFlag = false
	for i, squadCard in pairs(squadCards) do 
		-- 除了id要一样，而且必须要是普通卡牌
		local card = squadCard.card 
		if card ~= nil and SquadCards_GetId(card) == squadCardId and SquadCards_IsNormalCard(card)  then 
			--print("merge card")
			-- merge卡牌
			SquadCards_Merge(playerId, rightCard, card)
			SquadCards_SetIsTripleRewardCard(card)
			-- 最后一张三连卡牌索引
			player.lastTripleBuyCardIdx = i 
			mergedFlag = true
			--if UI_IsReplay() then 

				--local notifyStr = Loc_FormatText("$aa0406c7490b4889acebb0e09301e10f:132", player.playerName, "test")
				--Loc_FormatText("$aa0406c7490b4889acebb0e09301e10f:132", Player_GetDisplayName(playerId).LocString, card.Name)
				--UI_CreateEventCue(notifyStr, nil, "", "", "sfx_ui_event_queue_high_priority_play")
			--end
			break
		end
	end
	
end
	

function PlayerCard_RemoveAllTobeSelectTripleBuyCards(playerId) 
	local player = Core_GetPlayersTableEntry(playerId)
	player.tobeSelectTripleBuyCards = {}
end

-- 三连第二步，将三连后的待选卡牌所选中的卡牌添加到已选卡牌中
function PlayerCard_TripleBuyCardStep2(playerId, cardIdx)
	--print("PlayerCard_TripleBuyCardStep2")
	local cards = PlayerCard_GetTobeSelectTripleBuyCards(playerId)
	if cards ~= nil and #cards > 0 then 

		local card = cards[cardIdx]
		if card.tripleBuyCardType == CARD_TYPE_SQUAD then 
			Core_CallDelegateFunctions("OnSquadCardBuy", playerId, SquadCards_GetId(card))
			if PlayerCard_CheckHadEmptyPosInTempAreaSquadCards(playerId) then 
				Core_CallDelegateFunctions("OnSquadCardBuy", playerId, SquadCards_GetId(card), AREA_TEMP)
				PlayerCard_AddSquadCardToTempArea(playerId, SquadCards_GetId(card))
			else 
				Core_CallDelegateFunctions("OnSquadCardEnter", playerId, SquadCards_GetId(card), AREA_STANDARD)
				PlayerCard_AddSquadCard(playerId, SquadCards_GetId(card))
			end
				
		else 
			local player = Core_GetPlayersTableEntry(playerId)
			local squadCardIdx = player.lastTripleBuyCardIdx
			PlayerCard_AddAbilityToSquadCard(playerId, card.cardId, squadCardIdx)
		end
		PlayerCard_RemoveAllTobeSelectTripleBuyCards(playerId)
	end
end


-- 是否可以三连
function PlayerCard_IsCanTripleBuy(playerId, cardId)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local count = 0
	for i, squadCard in pairs(squadCards) do 
		local card = squadCard.card
		if card ~= nil and SquadCards_GetId(card) == cardId and SquadCards_IsNormalCard(card) then 
			count = count + 1
		end
	end
	if count > 0 then 
		squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
		for i, squadCard in pairs(squadCards) do 
			local card = squadCard.card
			if card ~= nil and SquadCards_GetId(card) == cardId and SquadCards_IsNormalCard(card) then 
				count = count + 1
			end
		end
	end
	-- print("same cards:" .. count)
	return count >= 2
end


-- 暂存区三连第一步：将卡牌添加到左侧同类卡牌中 
function PlayerCard_TripleBuyCardStep1AtTempArea(playerId, squadCardIdx)
	--print("PlayerCard_TripleBuyCardStep1")
	local toAddSquadCard = PlayerCard_GetTempAreaSquadCardByIdx(playerId, squadCardIdx)
	SquadCards_DecreaPickedCard(toAddSquadCard)
	PlayerCard_RemoveSquadCardFromTempArea(playerId, squadCardIdx)
	PlayerCard_TripleBuyCardStep1Common(playerId, SquadCards_GetId(toAddSquadCard), toAddSquadCard)

end

-- 暂存区是否可以三连
function PlayerCard_IsCanTripleBuyAtTempArea(playerId, cardId)
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local count = 0
	for i, squadCard in pairs(squadCards) do 
		local card = squadCard.card
		if card ~= nil and SquadCards_GetId(card) == cardId and SquadCards_IsNormalCard(card) then 
			count = count + 1
		end
	end
	if count > 0 then 
		squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
		for i, squadCard in pairs(squadCards) do 
			local card = squadCard.card
			if card ~= nil and SquadCards_GetId(card) == cardId and SquadCards_IsNormalCard(card) then 
				count = count + 1
			end
		end
	end
	-- print("same cards:" .. count)
	return count >= 3
end


-- 获取单位卡牌的部署位置
function PlayerCard_GetSquadCardSpawnPos(playerId, squadCard)
	if squadCard.spawnPosIdx == nil then 
		squadCard.spawnPosIdx = 3
	end 
	local spawnPosList = Ground_GetSpawnPosList(playerId) 
	return spawnPosList[squadCard.spawnPosIdx]
end

function PlayerCard_SetSquadCardSpawnPosIdx(squadCard, idx)
	if squadCard ~= nil then 
		squadCard.spawnPosIdx = idx
	end
end



function PlayerCard_GetSquadCardSpawnPosIdx(playerId, squadCard)
	if squadCard ~= nil and squadCard.spawnPosIdx == nil then 
		squadCard.spawnPosIdx = 3
	end 
	return squadCard.spawnPosIdx
end


-- 同文明卡牌增加单位（成长性单位）
function PlayerCard_AddSquadBySameRace(playerId, race, addType, addCount)
	if addType == nil then 
		addType = ADD_TYPE_COUNT
	end

	local func = function(playerId, squadCards, race, addType, addCount) 
		for _, card in pairs(squadCards) do 
			local squadCard = card.card
			--print("test000000000")
			if squadCard ~= nil and race == SquadCards_GetRace(squadCard) then 
				local squads = SquadsCards_GetFlatternProductionSquads(squadCard)
				if #squads > 0 then 
					--print("test00000000011111")
					local squad = squads[1]
					local toAddSquads = {}
					toAddSquads[squad.bpName] = addCount
					SquadCards_AddSpecialSquads(playerId, squadCard, toAddSquads)
				end
			end
		end
	end
	
	local squadCards = PlayerCard_GetSquadCards(playerId)
	local posList = {}
	for i, card in pairs(squadCards) do 
		if card.card ~= nil and race == SquadCards_GetRace(card.card) then 
			table.insert(posList, i)
		end
	end
	
	--table.sort(posList)
	local scs = {}
	local size = #posList
	if size > 3 then 
		size = 3
	end
	--Util_PrintTable(posList)
	for i = 1, size do 
		local rand = World_GetRand(1, #posList)
		table.insert(scs, squadCards[posList[rand]])
		table.remove(posList, rand)

	end
	
	--Util_PrintTable(scs)
	func(playerId, scs, race, addType, addCount)
	
	--local squadCards = PlayerCard_GetTempAreaSquadCards(playerId)
	--func(playerId, squadCards, race, addType, addCount)
end


function PlayerCard_GetSquadCardByAreaType(playerId, areaType, cardIdx)
	if areaType == AREA_STANDARD then 
		return PlayerCard_GetSquadCardByIdx(playerId, cardIdx)
	elseif areaType == AREA_TEMP then 
		return PlayerCard_GetTempAreaSquadCardByIdx(playerId, cardIdx)
	end
	return nil 
end